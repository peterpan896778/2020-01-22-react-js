// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<App /> mounts without crashing 1`] = `
<Connect(App)
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <App
    counter={0}
    decrement={[Function]}
    increment={[Function]}
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "unsubscribe": [Function],
      }
    }
  >
    <styled.div>
      <div
        className="sc-ifAKCX iGUmiv"
      >
        <Logo
          src="logo.svg"
        >
          <styled.img
            src="logo.svg"
          >
            <img
              className="sc-bxivhb gxVCyX"
              src="logo.svg"
            />
          </styled.img>
        </Logo>
        <styled.h2>
          <h2
            className="sc-EHOje gLWsgx"
          >
            React Redux Jest Example
          </h2>
        </styled.h2>
        <Counter
          decrement={[Function]}
          increment={[Function]}
          value={0}
        >
          <div>
            <styled.div>
              <div
                className="sc-bwzfXH fyTSsl"
              >
                <Button
                  label="Decrement"
                  onClick={[Function]}
                  type="danger"
                >
                  <styled.button
                    label="Decrement"
                    onClick={[Function]}
                    type="danger"
                  >
                    <button
                      className="sc-bdVaJa bVdEId"
                      label="Decrement"
                      onClick={[Function]}
                      type="danger"
                    >
                      Decrement
                    </button>
                  </styled.button>
                </Button>
                <Button
                  label="Increment"
                  onClick={[Function]}
                  type="success"
                >
                  <styled.button
                    label="Increment"
                    onClick={[Function]}
                    type="success"
                  >
                    <button
                      className="sc-bdVaJa hjTpqZ"
                      label="Increment"
                      onClick={[Function]}
                      type="success"
                    >
                      Increment
                    </button>
                  </styled.button>
                </Button>
              </div>
            </styled.div>
            <styled.div>
              <div
                className="sc-htpNat jMtkWU"
              >
                <span>
                  Counter: 
                  0
                </span>
              </div>
            </styled.div>
          </div>
        </Counter>
      </div>
    </styled.div>
  </App>
</Connect(App)>
`;

exports[`<App /> renders 1`] = `
<App
  counter={0}
  decrement={[Function]}
  increment={[Function]}
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  storeSubscription={
    Subscription {
      "listeners": Object {
        "notify": [Function],
      },
      "onStateChange": [Function],
      "parentSub": undefined,
      "store": Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      },
      "unsubscribe": null,
    }
  }
/>
`;
